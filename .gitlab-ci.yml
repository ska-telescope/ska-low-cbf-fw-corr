stages:
  - lint
  - build
  - test
  - publish
  - pages
  - integration
  - scan

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  VITIS_VERSION: "2022.2"
  GITLAB_PROJECT_ID: 38134197  # used in manual build (upload)
  XPFM: "/opt/xilinx/platforms/xilinx_u55c_gen3x16_xdma_3_202210_1/xilinx_u55c_gen3x16_xdma_3_202210_1.xpfm"
  RIVIERA_TARGET: "Riviera-PRO-2022.10-x64" # version for 2022.2

  PERSONALITY: "correlator"
  TARGET_ALVEO: "u55"
  # we escape the $ for BASEDIR to allow evaluation later
  CREATE_PRJ_SCRIPT_PATH: "$${BASEDIR}/designs/${PERSONALITY}/create_project.tcl"
  VIVADO_BUILD_BASE_DIR: "./build"
  PACKAGE_KRNL_SCRIPT_PATH: "$${BASEDIR}/designs/${PERSONALITY}/src/scripts/package_kernel.tcl"
  GEN_XO_DIRECTORY: "$${BASEDIR}/designs/${PERSONALITY}/src/scripts"
  GEN_XO_SCRIPT_PATH: "$GEN_XO_DIRECTORY/gen_xo.tcl"
  VPP_SCRIPT_DIR: "designs/${PERSONALITY}/src/scripts/${TARGET_ALVEO}"
  EXTRA_VPP_ARGS: "--user_ip_repo_paths $${BASEDIR}/pub-timeslave/hw/cores"
  EXTRA_XSIM_DIR: "$${BASEDIR}/sim"  # set to "" downstream if no sim exists
  EXTRA_MODEL_DIR: "" #"low-cbf-model"  # used as path for artifacts from xsim job
  EXTRA_MATLAB_MODEL_DIR: "" #"$${BASEDIR}/${EXTRA_MODEL_DIR}/src_atomic"  # set to "" downstream to skip matlab job
  COMPARE_SIM_TO_MODEL: "FALSE" 
  MAIN_BUILD_TAG: "TRUE"
  EXTRA_VPP_BUILD_TAG: "VPP_builder"
  

include:
  # Alveo FPGA build common CI configuration
  # Note: GitLab includes always grab the latest.
  # This may not match the copy in our 'common' submodule!
  - project: 'ska-telescope/low-cbf/ska-low-cbf-fw-common'
    file: 'gitlab/build.yml'
    # ref: 'b199d7c80292a5f42cbddd7f83b8d14c6daf350c'
  - project: 'ska-telescope/low-cbf/ska-low-cbf-fw-common'
    file: 'gitlab/simulate.yml'
    # ref: 'b199d7c80292a5f42cbddd7f83b8d14c6daf350c'


  # SKA standard includes
  # RAW artefact handling
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/raw.gitlab-ci.yml'
  # Release management
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/release.gitlab-ci.yml'
  # Docs pages
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/docs.gitlab-ci.yml'
  # .post step finalisers eg: badges
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'

raw-build:
  # note: this is modifying a job imported from templates-repository!
  needs:
    - job: v++
      optional: true  # v++ job doesn't always exist in pipeline
  variables:
    BUILD_STRING: "CI CAR Package. Pipeline ${CI_PIPELINE_ID} created at ${CI_PIPELINE_CREATED_AT}. Tag ${CI_COMMIT_TAG}. Commit ${CI_COMMIT_SHORT_SHA}."
  before_script:
    # we check if the build directory exists because v++ doesn't always run
    - if [ -d build ]; then source common/scripts/util.sh; prepare_package_files raw/ska-low-cbf-fw-corr-u55c "$BUILD_STRING"; fi;

# Low PSI CI job creation rules
.low_psi_rules: &low_psi_rules
  # The prerequisite jobs will not exist if 'docs' in commit title
  - if: ($CI_COMMIT_TITLE =~ /docs/)
    when: never
  # starting out with a manual (not required) job, for initial familiarity & debugging
  - when: manual
    allow_failure: true

################################################################################
.vitis_settings: &vitis_settings
  - source common/scripts/vitis_settings.sh

.args_settings: &args_settings
  - source common/scripts/args_settings.sh

.self_test: &self_test
  - common/scripts/self_test.sh
################################################################################

psi-low-test:
  stage: integration
  tags:
    - shell  # doesn't really need to be shell, just need to find an appropriate docker image
  rules:
    - *low_psi_rules
  needs:
    - publish dev package
  variables:
    # GitLab ID for ska-telescope/low-cbf/ska-low-cbf-integration
    TRIGGER_PROJECT: 48248401
    TRIGGER_REF: main
  script:
    - source common/scripts/util.sh
    - VERSION=$(get_version .)
    - echo Base version $VERSION
    # append -main, -dev, or nothing
    - if [[ -n "$CI_COMMIT_TAG" ]]; then
        echo "Release";
      elif [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" && "$MAIN_BUILD_TAG" == "TRUE" ]]; then
        echo "Main branch";
        VERSION="${VERSION}-main.${CI_COMMIT_SHORT_SHA}";
      else
        echo "Dev branch";
        VERSION=${VERSION}-dev.${CI_COMMIT_SHORT_SHA};
      fi
    - echo Full version $VERSION
    # Note that when using CI_JOB_TOKEN to trigger pipelines, the triggering project
    # must be in the allow list of the triggered project.
    - curl --fail
      --request POST
      --form "token=${CI_JOB_TOKEN}"
      --form "ref=${TRIGGER_REF}"
      --form "variables\[CORR_FW_VERSION\]=${VERSION}"
      "${CI_API_V4_URL}/projects/${TRIGGER_PROJECT}/trigger/pipeline"

ska-low-cbf-fw-testing:
  stage: integration
  rules:
    - *low_psi_rules
  needs:
    - publish dev package
  trigger:
    project: "ska-telescope/low-cbf/ska-low-cbf-fw-testing"
  variables:
    # version is actually something like "0.0.1-main.5a9cbb45" or "0.0.1-dev.b9faa971",
    # but inserting the main/dev string here is annoying. Hash alone should be ok
    CORR_FW_VERSION: ${CI_COMMIT_SHORT_SHA}
    CORR_FW_SOURCE: "gitlab"

####################################################################################################################
### V80 Build rules
# When to do a full build
.v80_build_rules: &v80_build_rules
  # Do not build if 'docs' in commit title
  - if: ($CI_COMMIT_TITLE =~ /docs/)
    when: never
  # merge request
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  # main branch
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  # tag (so raw-publish has something to publish)
  - if: $CI_COMMIT_TAG
  # 'build' keyword in commit title
  - if: $CI_COMMIT_TITLE =~ /build/
  # default - allow manual trigger but don't require it for pipeline success
  - when: manual
    allow_failure: true


### V80 CI jobs
create project v80:
  stage: .pre
  needs:
    - ARGS
  tags:
    - v80
    - $EXTRA_DEVELOPER_TAG
    - $EXTRA_CREATE_PROJECT_TAG
  variables:
    TARGET_ALVEO: "v80"
    VITIS_VERSION: "2024.2"
    EXTRA_DEVELOPER_TAG: ""
    PERSONALITY: "correlator_v80" # used to choose design
    CREATE_PRJ_SCRIPT_PATH: "$${BASEDIR}/designs/${PERSONALITY}/create_v80_design.tcl"
  before_script:
    - *vitis_settings
    - *args_settings
    - *self_test
  script:
    - common/scripts/create_project_v80.sh
  artifacts:
    paths:
      - build/

fpga lint v80:
  stage: lint
  rules:
    - *v80_build_rules
  # allow this job to be cancelled if new pipeline comes along
  interruptible: true
  needs:
    - create project v80
  variables:
    TARGET_ALVEO: "v80"
    VITIS_VERSION: "2024.2"
    EXTRA_DEVELOPER_TAG: ""
    PERSONALITY: "v80_top"    # project name based on general approach
    CREATE_PRJ_SCRIPT_PATH: "$${BASEDIR}/designs/${PERSONALITY}/create_v80_design.tcl"
    VIVADO_BUILD_BASE_DIR: "$${BASEDIR}/build/v80"
  tags:
    - v80
    - $EXTRA_DEVELOPER_TAG
  before_script:
    - *vitis_settings
    - *self_test
  script:
    - common/scripts/lint_step_v80.sh

build v80:
  #when: manual
  stage: .pre #build
  #rules:
  #  - *v80_build_rules
  # allow this job to be cancelled if new pipeline comes along
  interruptible: true
  # needs:
  #   - create project v80
  variables:
    TARGET_ALVEO: "v80"
    VITIS_VERSION: "2024.2"
    EXTRA_DEVELOPER_TAG: ""
    PERSONALITY: "v80_top"    # project name based on general approach
    CREATE_PRJ_SCRIPT_PATH: "$${BASEDIR}/designs/${PERSONALITY}/create_v80_design.tcl"
    VIVADO_BUILD_BASE_DIR: "$${BASEDIR}/build/v80"
  tags:
    - v80
    - $EXTRA_DEVELOPER_TAG
  before_script:
    - *vitis_settings
    - *self_test
  script:
    - pwd
