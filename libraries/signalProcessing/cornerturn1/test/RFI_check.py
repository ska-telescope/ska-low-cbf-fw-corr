# -*- coding: utf-8 -*-

"""
Calculate the expected amount of RFI flagging at the output given an RFI threshold setting and the burst length of flagged samples at the input
"""
import matplotlib.pyplot as plt
import numpy as np

# Alias power used in RFI calculation
# Generated by the matlab code RFI_analysis.m in the filterbanks directory
RFI_analysis = np.array([ 1, 1, 1, 1, 1, 1, 1, 1,
                          1, 1, 1, 1, 1, 2, 5, 9, 
                          12,      10,      3,      6,      46,     137,    254,     318,
                          250,     81,      36,     464,    1551,   2973,   3841,    3264,
                          1391,    163,     2727,   11136,  23481,  33001,  31521,   17136,
                          2243,    15671,   94095,  263770, 520726, 821207, 1090759, 1250784,
                          1250949, 1091201, 821791, 521291, 264194, 94333,  15749,   2230,
                          17100,   31504,   33011,  23505,  11157,  2738,   163,     1387,
                          3261,    3842,    2976,   1554,   465,    36,     81,      250,
                          318,     254,     137,    46,     6,      2,      10,      12,
                          9,       5,       2,      1,      1,      1,      1,       1,
                          1,       1,       1,      1,      1,      1,      1,       1])

def main():
    
    # Expected fd value ("fraction data") in visibilities
    vis_fd = np.zeros((60,90))
    # Expected tci value (time centroid) in visibilities
    vis_tci = np.zeros((60,90))
    
    flagged_count = -1
    for sps_flagged_log in range(-60,0,1):  # Number of SPS samples that are flagged, on a log scale
        # Get the actual number of flagged SPS samples. 786432 is a full integration interval (=192 * 4096)
        sps_flagged = round(786432 * (10 ** (sps_flagged_log/10)))
        print(f"flagged setting {sps_flagged_log}, SPS samples flagged {sps_flagged}")
        
        flagged_count += 1
        # 6 preload + 5 postload blocks of 4096 samples, with 192 blocks in the middle,
        # for 192 fine channel samples per integration period 
        fb_in_RFI = np.zeros(203 * 4096, dtype=np.int32)    
        # The corner turn frame starts at block 6 
        fb_in_RFI[(6*4096):(6*4096 + sps_flagged)] = 1
        # and the next corner turn frame starts at block 192+6 = 198
        fb_in_RFI[(198*4096):(198*4096 + min(sps_flagged,5*4096))] = 1
        
        threshold_count = -1
        for threshold_db in range(-90,0,1):
            threshold_count += 1
            # get firmware threshold setting
            rfi_regval = round(0x1_0000_0000 * (10**(threshold_db/10.0)))
            rfi_regval = min(rfi_regval, 0xFFFF_FFFF)  # limit calc to 0xFFFF_FFFF

            # Calculate the RFI marked values at the output of the filterbank
            RFI_mark = np.zeros(192)
            for fb_pkt_out in range(192): # 64 output packets from the filterbank
                fb_out96x512 = np.reshape(fb_in_RFI[fb_pkt_out * 4096 : (fb_pkt_out * 4096 + 12*4096)],(96,512))
                fb_out512x96_RFI = fb_out96x512.T
                RFI_sum = np.sum(fb_out512x96_RFI * RFI_analysis)
                if ((rfi_regval < 4294967295) and (RFI_sum > rfi_regval)):
                    RFI_mark[fb_pkt_out] = 1
            # fraction data and time centroid as calculated in the firmware
            vis_fd[flagged_count, threshold_count] = np.round(255 * np.sqrt((192 - np.sum(RFI_mark)) / 192))
            RFI_not_marked = 1 - RFI_mark
            sample_times = np.arange(192)
            if np.sum(RFI_not_marked) == 0:
                vis_tci[flagged_count, threshold_count] = 0
            else:
                vis_tci[flagged_count, threshold_count] = np.round((256/192) * np.sum(RFI_not_marked * sample_times) / np.sum(RFI_not_marked) - 128)
    
    print(vis_fd)
    print("fraction data highest two flagged samples:")
    print(vis_fd[58,:])
    print(vis_fd[59,:])
    print("TCI highest two flagged samples:")
    print(vis_tci[58,:])
    print(vis_tci[59,:])
    
    # Plot the result
    fig, ax = plt.subplots(subplot_kw={"projection": "3d"})
    X = np.arange(-90,0,1)  # RFI threshold
    Y = np.arange(-60,0,1)  # fraction of data flagged
    X, Y = np.meshgrid(X, Y)
    surf = ax.plot_surface(X, Y, vis_fd)
    ax.set_title ("fraction data used")
    ax.set_xlabel("RFI threshold (dB)")
    ax.set_ylabel("log fraction flagged")

    fig2, ax2 = plt.subplots(subplot_kw={"projection": "3d"})
    surf2 = ax2.plot_surface(X, Y, vis_tci)
    ax2.set_title("time centroid")
    ax2.set_xlabel("RFI threshold (dB)")
    ax2.set_ylabel("log fraction flagged")
    plt.show()

if __name__ == "__main__":
    main()